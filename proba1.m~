function varargout = proba1(varargin)
% PROBA1 MATLAB code for proba1.fig
%      PROBA1, by itself, creates a new PROBA1 or raises the existing
%      singleton*.
%
%      H = PROBA1 returns the handle to a new PROBA1 or the handle to
%      the existing singleton*.
%
%      PROBA1('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PROBA1.M with the given input arguments.
%
%      PROBA1('Property','Value',...) creates a new PROBA1 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before proba1_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to proba1_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help proba1

% Last Modified by GUIDE v2.5 12-Jan-2012 00:09:05

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @proba1_OpeningFcn, ...
                   'gui_OutputFcn',  @proba1_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before proba1 is made visible.
function proba1_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to proba1 (see VARARGIN)

% Choose default command line output for proba1
handles.output = hObject;

set(handles.probagroup,'SelectionChangeFcn',@probagroup_SelectionChangeFcn);
% Update handles structure
guidata(hObject, handles);


guidata(hObject, handles);


handles=guidata(hObject);
guidata(hObject, handles);

% UIWAIT makes proba1 wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = proba1_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure

varargout{1} = handles.output;



%%%%%%%%%%%%%%%%%%%%%%%%%%
%top gui buttons

function aboutproba_Callback(hObject, eventdata, handles)
mpr1=msgbox('Probability Analysis is a part of OVeM+ which allows to look at the wider picture of road transport.  Through Probability Analysis, the choice of the consumer is taken into consideration, and their effects on the future of transportation is analysed.','about Probability Analysis')
set( mpr1, 'color', [ 0.9 0.9 .9 ] )


function helpproba_Callback(hObject, eventdata, handles)
mpr2=msgbox('Probability Analysis allows to model the market and the diffusion of different types of vehicles, based on the user choices and legislation. After selecting between Consumer options or Legislation, please fill in the requried data and set a year. Press Go! and a fleet simulation is run, showing how the Consumer choices or Legislation will affect the fleet diffusion','Probability Analysis help');
set( mpr2, 'color', [ 0.9 0.9 .9 ] )


function close_Callback(hObject, eventdata, handles)
global CC
global CONSUMEROK
global POLICYOK
CONSUMEROK=[0];
POLICYOK=[0];
CC=[0 0 0 0 0 0 0];
close


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%user input consumer preference

%consumer controls



function probagroup_SelectionChangeFcn(hObject, eventdata)
handles=guidata(hObject);

global CONSUMEROK
global POLICYOK
global CC
switch get(eventdata.NewValue,'Tag')   % Get Tag of selected object
    case 'consumer'
%effect on cons
set(handles.ptext,'visible','on')
set(handles.rctext,'visible','on')
set(handles.vptext,'visible','on')
set(handles.rtext,'visible','on')
set(handles.etext,'visible','on')
set(handles.rftext,'visible','on')
set(handles.resetcons,'visible','on')
set(handles.price,'visible','on')
set(handles.rcost,'visible','on')
set(handles.perf,'visible','on')
set(handles.range,'visible','on')
set(handles.emiss,'visible','on')
set(handles.refuel,'visible','on')
set(handles.total,'visible','on')
set(handles.consumersurvey,'visible','on')
if CONSUMEROK==1
    set(handles.price,'string',CC(1))
    set(handles.rcost,'string',CC(2))
    set(handles.perf,'string',CC(3))
    set(handles.range,'string',CC(4))
    set(handles.emiss,'string',CC(5))
    set(handles.refuel,'string',CC(6))
    set(handles.finalconsyear,'visible','on')
    set(handles.finalconsyear1,'visible','on')
    set(handles.finalconsyear1,'string',CC(7))
    set(handles.goconsumer,'visible','on')
    set(handles.plotconsumer,'visible','on')
else
    set(handles.finalconsyear,'visible','off')
    set(handles.finalconsyear1,'visible','off')
    set(handles.goconsumer,'visible','off')
    set(handles.plotconsumer,'visible','off')
end
%effect on leg
        if POLICYOK==1
        set(handles.policies,'visible','on')
        set(handles.ofamd,'visible','on')
        set(handles.gopolicy,'visible','on');
        set(handles.plotpolicy,'visible','on');
        else
        set(handles.policies,'visible','off')
        set(handles.ofamd,'visible','off')
        set(handles.gopolicy,'visible','off');
        set(handles.plotpolicy,'visible','off');
        end
    otherwise
set(handles.ptext,'visible','off')
set(handles.rctext,'visible','off')
set(handles.vptext,'visible','off')
set(handles.rtext,'visible','off')
set(handles.etext,'visible','off')
set(handles.rftext,'visible','off')
set(handles.resetcons,'visible','off')
set(handles.consumersurvey,'visible','off')
set(handles.goconsumer,'visible','off')
set(handles.price,'visible','off')
set(handles.rcost,'visible','off')
set(handles.perf,'visible','off')
set(handles.range,'visible','off')
set(handles.emiss,'visible','off')
set(handles.refuel,'visible','off')
set(handles.total,'visible','off')
set(handles.finalconsyear,'visible','off')
set(handles.finalconsyear1,'visible','off')
set(handles.plotconsumer,'visible','off')
        if (CONSUMEROK(1)==0);
    mp2=msgbox('Please run Consumer Preference prior to Policy Intervention','Error Policy Intervention');
    set( mp2, 'color', [ 0.9 0.9 .9 ] )
        else
            %leg
            %visibility
            set(handles.policies,'visible','on')
            set(handles.ofamd,'visible','on')
            set(handles.gopolicy,'visible','on');
            set(handles.plotpolicy,'visible','off');
        end
        %effect on cons
end

guidata(hObject, handles);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%consumer preference

function resetcons_Callback(hObject, eventdata, handles)
cons=get(handles.consumer,'value');
if (cons==1)
set(handles.price,'string',0);
set(handles.rcost,'string',0);
set(handles.perf,'string',0);
set(handles.range,'string',0)
set(handles.emiss,'string',0);
set(handles.refuel,'string',0);
set(handles.total,'string',20);
set(handles.finalconsyear,'visible','off')
set(handles.finalconsyear1,'visible','off')
set(handles.goconsumer,'visible','off');
set(handles.plotconsumer,'visible','off');
else 
end


function price_Callback(hObject, eventdata, handles)
cons = get(handles.consumer,'value');
p1 = get(handles.price,'String');%get the string for the editText component
p=str2num(p1);
rc1 = get(handles.rcost,'String');
rc=str2num(rc1);
vp1 = get(handles.perf,'String');
vp=str2num(vp1);
r1 = get(handles.range,'String');
r=str2num(r1);
e1 = get(handles.emiss,'String');
e=str2num(e1);
rf1 = get(handles.refuel,'String');
rf=str2num(rf1);
t1=20-(p+rc+vp+r+e+rf);
t=num2str(t1);


if (cons==0)
    mp=msgbox('Please select Consumer Preference','Error Consumer');
    set( mp, 'color', [ 0.9 0.9 .9 ] )
elseif    (isempty(p) || p < 0 || p > 20);  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.price,'Value',0);
    set(handles.price,'String','0');
    mp=msgbox('Please insert a value between 0 to 20 for Purchase Price','Error Purchase Price');
    set( mp, 'color', [ 0.9 0.9 .9 ] )
end

if (t1<0)
    set(handles.price,'string','0');
    mp1=msgbox('You have exceeded your maximum allocated points','Error Allocated Points');
    set( mp1, 'color', [ 0.9 0.9 .9 ] )
    p1 = get(handles.price,'String');
    p=str2num(p1);
    t1=20-(p+rc+vp+r+e+rf);
    t=num2str(t1);
    set(handles.total,'string',t);
elseif t1==0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','on');
    set(handles.finalconsyear1,'visible','on');
    set(handles.goconsumer,'visible','on');
elseif t1>0
    set(handles.total,'string',t)
    set(handles.finalconsyear,'visible','off');
    set(handles.finalconsyear1,'visible','off');
    set(handles.goconsumer,'visible','off');
end
guidata(hObject, handles)


function price_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function rcost_Callback(hObject, eventdata, handles)
cons = get(handles.consumer,'value');
p1 = get(handles.price,'String');%get the string for the editText component
p=str2num(p1);
rc1 = get(handles.rcost,'String');
rc=str2num(rc1);
vp1 = get(handles.perf,'String');
vp=str2num(vp1);
r1 = get(handles.range,'String');
r=str2num(r1);
e1 = get(handles.emiss,'String');
e=str2num(e1);
rf1 = get(handles.refuel,'String');
rf=str2num(rf1);
t1=20-(p+rc+vp+r+e+rf);
t=num2str(t1);

if (cons==0)
    mp=msgbox('Please select Consumer Preference','Error Consumer');
    set( mp, 'color', [ 0.9 0.9 .9 ] )
elseif    (isempty(rc)|| rc < 0 || rc > 20);  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.rcost,'Value',0);
    set(handles.rcost,'String','0');
    mrc=msgbox('Please insert a value between 0 to 20 for Running Cost','Error Running Cost');
    set( mrc, 'color', [ 0.9 0.9 .9 ] );
end

if (t1<0)
    set(handles.rcost,'string','0');
    mp1=msgbox('You have exceeded your maximum allocated points','Error Allocated Points');
    set( mp1, 'color', [ 0.9 0.9 .9 ] )
    rc1 = get(handles.rcost,'String');
    rc=str2num(rc1);
    t1=20-(p+rc+vp+r+e+rf);
    t=num2str(t1);
    set(handles.total,'string',t);
elseif t1==0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','on');
    set(handles.finalconsyear1,'visible','on');
    set(handles.goconsumer,'visible','on');
elseif t1>0
    set(handles.total,'string',t)
    set(handles.finalconsyear,'visible','off');
    set(handles.finalconsyear1,'visible','off');
    set(handles.goconsumer,'visible','off');
end
guidata(hObject, handles)


function rcost_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function perf_Callback(hObject, eventdata, handles)
cons = get(handles.consumer,'value');
p1 = get(handles.price,'String');%get the string for the editText component
p=str2num(p1);
rc1 = get(handles.rcost,'String');
rc=str2num(rc1);
vp1 = get(handles.perf,'String');
vp=str2num(vp1);
r1 = get(handles.range,'String');
r=str2num(r1);
e1 = get(handles.emiss,'String');
e=str2num(e1);
rf1 = get(handles.refuel,'String');
rf=str2num(rf1);
t1=20-(p+rc+vp+r+e+rf)
t=num2str(t1)

if(cons==0)
    mp=msgbox('Please select Consumer Preference','Error Consumer');
    set( mp, 'color', [ 0.9 0.9 .9 ] )
elseif (isempty(vp) || vp < 0 || vp > 20);  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.perf,'Value',0);
    set(handles.perf,'String','0');
    mvp=msgbox('Please insert a value between 0 to 20 for Vehicle Performance','Error Vehicle Performance');
    set( mvp, 'color', [ 0.9 0.9 .9 ] )
end

if (t1<0)
    set(handles.perf,'string','0');
    mp1=msgbox('You have exceeded your maximum allocated points','Error Allocated Points');
    set( mp1, 'color', [ 0.9 0.9 .9 ] )
    vp1 = get(handles.perf,'String');
    vp=str2num(vp1);
    t1=20-(p+rc+vp+r+e+rf);
    t=num2str(t1);
    set(handles.total,'string',t);
elseif t1==0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','on');
    set(handles.finalconsyear1,'visible','on');
    set(handles.goconsumer,'visible','on');
elseif t1>0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','off');
    set(handles.finalconsyear1,'visible','off');
    set(handles.goconsumer,'visible','off');
end
guidata(hObject, handles)



function perf_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function range_Callback(hObject, eventdata, handles)
cons = get(handles.consumer,'value');
p1 = get(handles.price,'String');%get the string for the editText component
p=str2num(p1);
rc1 = get(handles.rcost,'String');
rc=str2num(rc1);
vp1 = get(handles.perf,'String');
vp=str2num(vp1);
r1 = get(handles.range,'String');
r=str2num(r1);
e1 = get(handles.emiss,'String');
e=str2num(e1);
rf1 = get(handles.refuel,'String');
rf=str2num(rf1);
t1=20-(p+rc+vp+r+e+rf)
t=num2str(t1)

if (cons==0)
    mp=msgbox('Please select Consumer Preference','Error Consumer');
    set( mp, 'color', [ 0.9 0.9 .9 ] )
elseif (isempty(r)|| r < 0 || r > 20);  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.range,'Value',0);
    set(handles.range,'String','0');
    mr=msgbox('Please insert a value between 0 to 20 for Range','Error Range');
    set( mr, 'color', [ 0.9 0.9 .9 ] )
end

if (t1<0)
    set(handles.range,'string','0');
    mp1=msgbox('You have exceeded your maximum allocated points','Error Allocated Points');
    set( mp1, 'color', [ 0.9 0.9 .9 ] )
    r1 = get(handles.range,'String');
    r=str2num(r1);
    t1=20-(p+rc+vp+r+e+rf);
    t=num2str(t1);
    set(handles.total,'string',t);
elseif t1==0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','on');
    set(handles.finalconsyear1,'visible','on');
    set(handles.goconsumer,'visible','on');
elseif t1>0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','off');
    set(handles.finalconsyear1,'visible','off');
    set(handles.goconsumer,'visible','off');
end
guidata(hObject, handles)



function range_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function emiss_Callback(hObject, eventdata, handles)
cons = get(handles.consumer,'value');
p1 = get(handles.price,'String');%get the string for the editText component
p=str2num(p1);
rc1 = get(handles.rcost,'String');
rc=str2num(rc1);
vp1 = get(handles.perf,'String');
vp=str2num(vp1);
r1 = get(handles.range,'String');
r=str2num(r1);
e1 = get(handles.emiss,'String');
e=str2num(e1);
rf1 = get(handles.refuel,'String');
rf=str2num(rf1);
t1=20-(p+rc+vp+r+e+rf)
t=num2str(t1)

if (cons==0)
    mp=msgbox('Please select Consumer Preference','Error Consumer');
    set( mp, 'color', [ 0.9 0.9 .9 ] )
elseif (isempty(e)|| e < 0 || e > 20);  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.emiss,'Value',0);
    set(handles.emiss,'String','0');
    mr=msgbox('Please insert a value between 0 to 20 for Emissions','Error Emissions');
    set( mr, 'color', [ 0.9 0.9 .9 ] )
end

if (t1<0)
    set(handles.emiss,'string','0');
    mp1=msgbox('You have exceeded your maximum allocated points','Error Allocated Points');
    set( mp1, 'color', [ 0.9 0.9 .9 ] )
    e1 = get(handles.emiss,'String');
    e=str2num(e1);
    t1=20-(p+rc+vp+r+e+rf);
    t=num2str(t1);
    set(handles.total,'string',t);
elseif t1==0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','on');
    set(handles.finalconsyear1,'visible','on');
    set(handles.goconsumer,'visible','on');
elseif t1>0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','off');
    set(handles.finalconsyear1,'visible','off');
    set(handles.goconsumer,'visible','off');
end
guidata(hObject, handles) 

function emiss_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function refuel_Callback(hObject, eventdata, handles)
cons = get(handles.consumer,'value');
p1 = get(handles.price,'String');%get the string for the editText component
p=str2num(p1);
rc1 = get(handles.rcost,'String');
rc=str2num(rc1);
vp1 = get(handles.perf,'String');
vp=str2num(vp1);
r1 = get(handles.range,'String');
r=str2num(r1);
e1 = get(handles.emiss,'String');
e=str2num(e1);
rf1 = get(handles.refuel,'String');
rf=str2num(rf1);
t1=20-(p+rc+vp+r+e+rf)
t=num2str(t1)

if (cons==0)
    mp=msgbox('Please select Consumer Preference','Error Consumer');
    set( mp, 'color', [ 0.9 0.9 .9 ] )
elseif (cons==1)&&(isempty(rf)|| rf < 0 || rf > 20);  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.refuel,'Value',0);
    set(handles.refuel,'String','0');
    mr=msgbox('Please insert a value between 0 to 20 for Refuelling Availibility','Error Refuelling Availibility');
    set( mr, 'color', [ 0.9 0.9 .9 ] )
end

if (t1<0)
    set(handles.refuel,'string','0');
    mp1=msgbox('You have exceeded your maximum allocated points','Error Allocated Points');
    set( mp1, 'color', [ 0.9 0.9 .9 ] )
    rf1 = get(handles.refuel,'String');
    rf=str2num(rf1);
    t1=20-(p+rc+vp+r+e+rf);
    t=num2str(t1);
    set(handles.total,'string',t);
elseif t1==0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','on');
    set(handles.finalconsyear1,'visible','on');
    set(handles.goconsumer,'visible','on');
elseif t1>0
    set(handles.total,'string',t);
    set(handles.finalconsyear,'visible','off');
    set(handles.finalconsyear1,'visible','off');
    set(handles.goconsumer,'visible','off');
end
guidata(hObject, handles)

function refuel_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%user sets yearcons for simulation


function finalconsyear1_Callback(hObject, eventdata, handles)
y = get(handles.finalconsyear1,'String');%get the string for the editText component
y = str2num(y);%convert from string to number if possible, otherwise returns empty
if (isempty(y) || y < 2011 || y > 2100)  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.finalconsyear1,'Value',2011);
    set(handles.finalconsyear1,'String','2011');
end



function finalconsyear1_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



%%%%%%%%%%%%%%%%
%control for consumer


function goconsumer_Callback(hObject, eventdata, handles)
global CONSUMEROK
global SPD
%global CAC10 %determines if advanced consumer is chosen
%global CAC % values from advanced consumer
global CC %values when advanced is not used
%global SETCC %determines if CC is run
%global LAC10 %determines if advanced legislation is chosen
%global LAC % values from advanced leg
%global LC %values when advanced is not used
%global PROBA %value passed on to ovem3

cons = get(handles.consumer,'value');
p1 = get(handles.price,'String');
p=str2num(p1);
rc1 = get(handles.rcost,'String');
rc=str2num(rc1);
vp1 = get(handles.perf,'String');
vp=str2num(vp1);
r1 = get(handles.range,'String');
r=str2num(r1);
e1 = get(handles.emiss,'String');
e=str2num(e1);
rf1 = get(handles.refuel,'String');
rf=str2num(rf1);
t1=20-(p+rc+vp+r+e+rf);
y1 = get(handles.finalconsyear1,'string');
y=str2num(y1);

%tstar = (p*rc*c*vp*r*e*rf);
CC = [p rc vp r e rf y]
CONSUMEROK=[0];

icert_cons_pref

if CONSUMEROK(1)==1
    mchoose=msgbox('Consumer probability complete! Please press Plot to view results.','Consumer preference');
   set( mchoose, 'color', [ 0.9 0.9 .9 ]) 
    set(handles.plotconsumer,'visible','on')
else
    set(handles.plotconsumer,'visible','off')
end


function plotconsumer_Callback(hObject, eventdata, handles)
global CONSUMEROK
if CONSUMEROK(1)==1
    plot_consumer
else
end


function consumersurvey_Callback(hObject, eventdata, handles)
cons=get(handles.consumer,'value')
if (cons==1)
    consumer
else
end


%legislation part
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%sliders in the legislate region

function fuelsl_Callback(hObject, eventdata, handles)

fuel = get(handles.fuelsl,'Value');%obtains the slider value from the slider component
set(handles.fuelvl,'String', num2str(fuel));%puts the slider value into the edit text component
guidata(hObject, handles);% Update handles structure


function fuelsl_CreateFcn(hObject, eventdata, handles)

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end




function infrasl_Callback(hObject, eventdata, handles)
infra = get(handles.infrasl,'Value');%obtains the slider value from the slider component
set(handles.infravl,'String', num2str(infra));%puts the slider value into the edit text component
guidata(hObject, handles);% Update handles structure

function infrasl_CreateFcn(hObject, eventdata, handles)

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


function renewsl_Callback(hObject, eventdata, handles)
renew = get(handles.renewsl,'Value');%obtains the slider value from the slider component
set(handles.renewvl,'String', num2str(renew));%puts the slider value into the edit text component
guidata(hObject, handles);% Update handles structure

function renewsl_CreateFcn(hObject, eventdata, handles)

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%values in the legislation part

function fuelvl_Callback(hObject, eventdata, handles)
fuel = get(handles.fuelvl,'String');%get the string for the editText component
fuel = str2num(fuel);%convert from string to number if possible, otherwise returns empty


if (isempty(fuel) || fuel < 0 || fuel > 100)  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.fuelsl,'Value',0);
    set(handles.fuelvl,'String','0');
else
    set(handles.fuelsl,'Value',fuel);
end

function fuelvl_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function fpyi_Callback(hObject, eventdata, handles)
fpyi1 = get(handles.fpyi,'string');
fpyi = str2num(fpyi1);
fpyo1 = get(handles.fpyo,'string');
fpyo = str2num(fpyo1);

if(fpyo<fpyi)
    my=msgbox('The policy year out cannot be smaller than the year in', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
elseif(fpyi<2000)
    my=msgbox('The policy year in cannot be smaller than 2000', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
        set(handles.fpyi,'string','2000')
end

function fpyi_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function fpyo_Callback(hObject, eventdata, handles)
fpyi1 = get(handles.fpyi,'string');
fpyi = str2num(fpyi1);
fpyo1 = get(handles.fpyo,'string');
fpyo = str2num(fpyo1);
cy1 = get(handles.yearcons,'string');
cy = str2num(cy1);

if(fpyo<fpyi)
    my=msgbox('The policy year out cannot be smaller than the year in', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
elseif(fpyo>cy)
    my=msgbox('The policy year out cannot be greater than the final simulation year', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
        set(handles.fpyo,'string',cy)
end

function fpyo_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




function infravl_Callback(hObject, eventdata, handles)
infra = get(handles.infravl,'String');%get the string for the editText component
infra = str2num(infra);%convert from string to number if possible, otherwise returns empty


if (isempty(infra) || infra < 0 || infra > 100)  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.infrasl,'Value',0);
    set(handles.infravl,'String','0');
else
    set(handles.infrasl,'Value',infra);
end

function infravl_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




function infrayi_Callback(hObject, eventdata, handles)
iyi1 = get(handles.infrayi,'string');
iyi = str2num(iyi1);
iyo1 = get(handles.infrayo,'string');
iyo = str2num(iyo1);

if(iyo<iyi)
    my=msgbox('The policy year out cannot be smaller than the year in', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
elseif(iyi<2000)
    my=msgbox('The policy year in cannot be smaller than 2000', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
        set(handles.infrayi,'string','2000')
end
        
        
function infrayi_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function infrayo_Callback(hObject, eventdata, handles)
iyi1 = get(handles.infrayi,'string');
iyi = str2num(iyi1);
iyo1 = get(handles.infrayo,'string');
iyo = str2num(iyo1);
cy1 = get(handles.yearcons,'string');
cy = str2num(cy1);

if(iyo<iyi)
    my=msgbox('The policy year out cannot be smaller than the year in', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
elseif(iyo>cy)
    my=msgbox('The policy year out cannot be greater than the final simulation year', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
        set(handles.infrayo,'string',cy)
end

function infrayo_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function renewvl_Callback(hObject, eventdata, handles)
renew = get(handles.renewvl,'String');%get the string for the editText component
renew = str2num(renew);%convert from string to number if possible, otherwise returns empty


if (isempty(renew) || renew < 0 || renew > 100)  %if user inputs something is not a number, or if the input is less than or greater than 100, then the slider value defaults to 0
    set(handles.renewsl,'Value',0);
    set(handles.renewvl,'String','0');
else
    set(handles.renewsl,'Value',renew);
end

function renewvl_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function ncyi_Callback(hObject, eventdata, handles)
ryi1 = get(handles.ncyi,'string');
ryi = str2num(ryi1);
ryo1 = get(handles.ncyo,'string');
ryo = str2num(ryo1);

if(ryo<ryi)
    my=msgbox('The policy year out cannot be smaller than the year in', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
elseif(ryi<2000)
    my=msgbox('The policy year in cannot be smaller than 2000', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
        set(handles.ncyi,'string','2000')
end

function ncyi_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function ncyo_Callback(hObject, eventdata, handles)
ryi1 = get(handles.ncyi,'string');
ryi = str2num(ryi1);
ryo1 = get(handles.ncyo,'string');
ryo = str2num(ryo1);
cy1 = get(handles.consyear,'string');
cy = str2num(cy1);
cy1 = get(handles.yearcons,'string');
cy = str2num(cy1);

if(ryo<ryi)
    my=msgbox('The policy year out cannot be smaller than the year in', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
        
elseif(ryo>cy)
    my=msgbox('The policy year out cannot be greater than the final simulation year', 'Error Policy Year');
        set( my, 'color', [ 0.9 0.9 .9 ] )
        set(handles.ncyo,'string',cy)
end
    

function ncyo_CreateFcn(hObject, eventdata, handles)

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%leg controls




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%proba main control


function policies_Callback(hObject, eventdata, handles)
global SETPAMD
PAMD
if SETPAMD(1)==1
    set(handles.gopolicy,'visible','on');
else
end
    

function ofamd_Callback(hObject, eventdata, handles)
global SETOFAMD
OFAMD
if SETOFAMD(1)==1
    set(handles.gopolicy,'visible','on');
else
end

function gopolicy_Callback(hObject, eventdata, handles)
global CC
global PAMD
global OFAMD
global SETPAMD
global SETOFAMD
global POLICYOK

if (SETPAMD(1)==0 && SETOFAMD(1)==0)
    mp2=msgbox('Please select a factor affecting market diffusion', 'Set Policy');
    set( mp2, 'color', [ 0.9 0.9 .9 ] )
else
icert_policy

if POLICYOK(1)==1
    set(handles.plotpolicy,'visible','on')
else
    set(handles.plotpolicy,'visible','off')
end
end

function plotpolicy_Callback(hObject, eventdata, handles)
plot_policy
